"""Write CI_coeff.dat and CAS_WF_rcas files from dets.bin, generated by DICE
"""
import numpy as np
import os 
import sys
import struct

def write_CI_exp_files(det_file, n_act_orb=0, n_core=0, tot_wt=0.995):
	"""Write the dets config and their CI expansion from a binary output from DICE
	into the CI_coeff.dat and CAS_WF_rcas file for AFQMC

	Parameters
	----------
	det_file : str
		Path to the dets.bin file from DICE
	n_act_orb : int, default = 0
		Number of active orbitals
	tot_wt : float, default = 0.995
		Cutoff for CI expansion
	
	Returns
	-------
	None
	"""
    #----------------------------HELPER FUNCTIONS------------------------------#
	def read_DICE_output(dice_det_file, n_act_orbs=0):
		"""Read determinant file from DICE ("dets.bin") and return a
		dict object containing the CI coeffs and the occupation of the
		active space in a list of str of elements that are one of
		`'0'` (empty), `'a'` (single, up), `'b'` (single, dn) and `'2'`
		(doubly occupied).

		Parameters
		----------
		dice_det_file : str
			Path to output file from Dice.
		n_act_orb : int, default 0
			Number of active orbitals to double check if the occupation
			is read in correctly.

		Returns
		-------
		dice_dict : dict
			`dict` containing the determinants and their CI coeffs.
		n_det : int
			Number of determinants produced by DICE.
		"""

		dice_dict = {}

		with open(dice_det_file, 'rb') as infile:
			content = infile.read()
			# UNPACK
			# First 8 bytes - 2 ints:
			# The total number of determinants and the number of CAS orbs
			n_det, n_cas_orbs = struct.unpack("ii", content[:8])
			assert n_cas_orbs == n_act_orb
			# The remaining of the file is structured as n_det groups of
			# 8 bytes - CI coeff (double)
			# n_act_orb*1 bytes - occupation states of the orbs (char)
			coeffs = np.zeros(n_det)
			occ_str = []
			for det_idx in range(n_det):
				ci_coeff = struct.unpack("d", content[8 + det_idx*(8+n_cas_orbs): 8 + det_idx*(8+n_cas_orbs)+8])
				coeffs[det_idx] += ci_coeff
				occ = struct.unpack("c"*n_cas_orbs, content[8 + det_idx*(8+n_cas_orbs)+8: 8 + det_idx*(8+n_cas_orbs)+8+n_cas_orbs])
				occ_str.append([elt.decode("utf-8") for elt in occ])

			dice_dict['coeff'] = coeffs
			dice_dict['occ'] = occ_str

		return dice_dict, n_det

	def convert_to_ci_coeff_str(occ_list):
		"""Convert a list of occupation of orbitals to the format of
		CI_coeff.dat file, i.e. 0b111, with orbital in decreasing energy from
		left to right.

		Parameters
		----------
		occ_list : list
			List of occupation state of orbitals. Length of number
			of active orbitals.

		Returns
		-------
		a_str, b_str : str
			strings containing the occupation of the orbitals inn the
			format of CI_coeff.dat, i.e. 0b111
		"""
		a_occ_list = []
		b_occ_list = []

		for orb in range(len(occ_list)):
			if occ_list[orb] == '2':
				a_occ_list.append('1')
				b_occ_list.append('1')
			elif occ_list[orb] == 'a':
				a_occ_list.append('1')
				b_occ_list.append('0')
			elif occ_list[orb] == 'b':
				a_occ_list.append('0')
				b_occ_list.append('1')
			else:
				a_occ_list.append('0')
				b_occ_list.append('0')
		a_string = (''.join(a_occ_list)).rstrip('0')
		b_string =  (''.join(b_occ_list)).rstrip('0')

		return ''.join(['0b', a_string[::-1]]), ''.join(['0b', b_string[::-1]])

	def convert_to_multidet_config(occ_list, ci_coeff, n_core=0):
		"""Helper function to convert the determinant output from DICE to the
		format of CAS wavefunction for the AFQMC codes.

		Parameters
		----------
		occ_list : list
			Occupation of the orbitals. Values in '2', '0', 'a' or 'b'.
		ci_coeff : float
			The CI coefficient of the configuration.
		n_core : int, default 0
			Number of core e's (not in active space).

		Returns
		-------
		det_config : str
			String containing the determinant and its CI coeff in the format
			of AFQMC codes.
		"""
		up_config = []
		dn_config = []
		cur_idx = 0

		# write in the core electrons
		for idx in range(int(n_core/2)):
			cur_idx += 1
			up_config.append(str(cur_idx))
			dn_config.append(str(cur_idx))

		# write in the active space
		for orb_idx in range(n_act_orb):
			cur_idx += 1
			if occ_list[orb_idx] == '2':
				up_config.append(str(cur_idx))
				dn_config.append(str(cur_idx))
			elif occ_list[orb_idx] == 'a':
				up_config.append(str(cur_idx))
			elif occ_list[orb_idx] == 'b':
				dn_config.append(str(cur_idx))

		up_str = '\t'.join(up_config)
		dn_str = '\t'.join(dn_config)
		det_config = '\t\t'.join([up_str, dn_str, '#', str(ci_coeff), '\n'])
		return det_config

	def compute_num_sig_dets(coeff_list, cutoff=0.995):
		"""Get the number of determinants with weights summed up to cut off

		Parameters
		----------
		coeff_list : array
			SORTED arrays of CI coefficients.
		cutoff : float, default 0.995
			threshold to cut off the determinants list.

		Returns
		-------
		n_det : int
			Number of determinants whose weights sum up to the cut off threshold.
		"""
		n_det = 0
		wt = 0.0

		for det_idx in range(len(coeff_list)):
			n_det += 1
			wt += coeff_list[det_idx]**2
			if wt >= cutoff:
				return n_det
		print(f'There are not enough dets in the det file to sum to the given threshold of {cutoff}')
		print('Returning the total number of dets in the file')
		return n_det

	#-----------------------------FUNCTION BODY----------------------------#

	# Read in outputs from DICE into a dict
	dice_dict, n_det = read_DICE_output(det_file, n_act_orb)
	#print(dice_dict)
	# compute total weights and cut-off
	n_det = compute_num_sig_dets(dice_dict['coeff'], tot_wt)
	#print('N_DET = ', n_det)

	# Write into CI_coeff.dat
	with open('CI_coeff.dat', 'w') as ci_file:
		for det_idx in range(n_det):
			a_string, b_string = convert_to_ci_coeff_str(dice_dict['occ'][det_idx])
			ci_file.write(f"{a_string:20} {b_string:20} {dice_dict['coeff'][det_idx]:20.16f}\n")

	# Write the CAS configuration into CAS_WF_rcas
	# compute weights
	wt_list = np.zeros(n_det)
	for det_idx in range(n_det):
		wt_list[det_idx] = np.sum(np.square(dice_dict['coeff'][:det_idx+1]))

	with open('CAS_WF_rcas', 'w') as cas_file:
		cas_file.write("# --- BEGIN TRIAL WAVE FUNCTION --- simple cut\n")
		cas_file.write(f"# Total number of determinants = {n_det}\n")
		cas_file.write(f"# Total weight                 = {wt_list[-1]:.8f}\n")
		cas_file.write('multidet_cfg\n')

		for det_idx in range(n_det):
			cas_config = convert_to_multidet_config(dice_dict['occ'][det_idx],
													dice_dict['coeff'][det_idx],
													n_core)
			cas_file.write(cas_config)

		cas_file.write('\n')
		cas_file.write('multidet_ampl\n')
		cas_file.write('#             amplitude  # ndets   det_tot_weight\n')

		for det_idx in range(n_det):
			cas_file.write(f"{dice_dict['coeff'][det_idx]:20.16f}\t{det_idx+1:20}\t{wt_list[det_idx]:20.16f}\n")
			#cas_file.write('\t'.join([str(dice_dict['coeff'][det_idx]), str(det_idx+1), str(wt_list[det_idx]),'\n']))

		cas_file.write('\n')
		cas_file.write('multidet_type 1\n')
		cas_file.write(f'npsitdet {n_det}\n')
		cas_file.write('# --- END TRIAL WAVE FUNCTION --- simple cut\n')

if __name__ == '__main__':
	det_file_path = '/Users/aarodynamic95/projects/Research/GIT/utils/shci_test_files/dets.bin'
	write_CI_exp_files(det_file_path, 73, 45, 0.99)
